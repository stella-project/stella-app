import json
import pandas as pd 
import re
import spacy
import nltk
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import cosine_similarity
#from nltk.corpus import stopwords

from spacy.lang.de.stop_words import STOP_WORDS as de_stop
from spacy.lang.en.stop_words import STOP_WORDS as en_stop
from nltk.stem.porter import PorterStemmer
import string

nltk.download('punkt')

final_stopwords_list = list(en_stop) + list(de_stop)

with open("../../data/json/publication.json") as f :
    d = json.load(f)["_source"]

with open("../../data/json/dataset.json") as f2 :
    ds = json.load(f2)["_source"]

datasetdf = pd.DataFrame(ds).T
pubdf=pd.DataFrame(d).T


flrt_dts_df = datasetdf.loc[:,["abstract","id", "title", "topic"]][:10]
flrt_pub_df = pubdf.loc[:,["abstract","id", "title", "topic"]][:10]

all_filter = [flrt_dts_df, flrt_pub_df]

df_f_all = pd.concat(all_filter)

trans_table = {ord(c): None for c in string.punctuation + string.digits}    
stemmer = PorterStemmer()

def tokenize(text):
    tokens = [word for word in nltk.word_tokenize(text.translate(trans_table)) if len(word) > 1] 
    stems = [stemmer.stem(item) for item in tokens]
    return stems


def pre_process(text):
    
    # lowercase
    text=text.lower()
    
    #remove tags
    text=re.sub("<!--?.*?-->","",text)
    
    # remove special characters and digits
    text=re.sub("(\\d|\\W)+"," ",text)
    
    return text

 
df_f_all['text'] = df_f_all.fillna('').apply(lambda row: row['title'] +' '+str(row['abstract'])+ str(' '.join(str(v) for v in row["topic"])), axis=1)
df_f_all['text'] = df_f_all['text'].apply(lambda x:pre_process(x))
print(len(df_f_all))

#t['text'] = t.fillna('').apply(lambda row: row['title'] +' '+str(row['abstract'])+ str(' '.join(str(v) for v in row["topic"])), axis=1)
#t['text'] = t['text'].apply(lambda x:pre_process(x))

count_vectorizer = TfidfVectorizer(tokenizer=tokenize,stop_words=final_stopwords_list)
#print(count_vectorizer.shape)

sparse_matrix = count_vectorizer.fit_transform(df_f_all['text'].values.tolist())
print(sparse_matrix.shape)
print(sparse_matrix)

output = pd.DataFrame(data=cosine_similarity(sparse_matrix), index= t.index, columns=t.index , dtype = "float16")

output.to_pickle('my_file_ds.pkl')


